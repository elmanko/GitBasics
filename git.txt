git
Introduccion para principiantes.

por que necesitas control de versiones?
que es DVCS? Distributed Version Control System
git fue creado por Linus Torvald en el 2005 para tener un DVCS para el kernel de linux, jala en mac windows y linux
dise;ado para velocidad, simplicidad, distribuido, branc/merge, escalable


sudo apt-get install git

checar la version:
elmanko@Ruth:~/Projects/GitBasics$ git version
git version 2.7.4

configuracion
	system
		git config --system
			elmanko@Ruth:~/Projects/GitBasics$ git config --system
			usage: git config [<options>]

			Config file location
			    --global              use global config file
			    --system              use system config file
			    --local               use repository config file
			    -f, --file <file>     use given config file
			    --blob <blob-id>      read config from given blob object

			Action
			    --get                 get value: name [value-regex]
			    --get-all             get all values: key [value-regex]
			    --get-regexp          get values for regexp: name-regex [value-regex]
			    --get-urlmatch        get value specific for the URL: section[.var] URL
			    --replace-all         replace all matching variables: name value [value_regex]
			    --add                 add a new variable: name value
			    --unset               remove a variable: name [value-regex]
			    --unset-all           remove all matches: name [value-regex]
			    --rename-section      rename section: old-name new-name
			    --remove-section      remove a section: name
			    -l, --list            list all
			    -e, --edit            open an editor
			    --get-color           find the color configured: slot [default]
			    --get-colorbool       find the color setting: slot [stdout-is-tty]

			Type
			    --bool                value is "true" or "false"
			    --int                 value is decimal number
			    --bool-or-int         value is --bool or --int
			    --path                value is a path (file or directory name)

			Other
			    -z, --null            terminate values with NUL byte
			    --name-only           show variable names only
			    --includes            respect include directives on lookup

	user
		git config --global
			elmanko@Ruth:~/Projects/GitBasics$ git config --global
			usage: git config [<options>]

			Config file location
			    --global              use global config file
			    --system              use system config file
			    --local               use repository config file
			    -f, --file <file>     use given config file
			    --blob <blob-id>      read config from given blob object

			Action
			    --get                 get value: name [value-regex]
			    --get-all             get all values: key [value-regex]
			    --get-regexp          get values for regexp: name-regex [value-regex]
			    --get-urlmatch        get value specific for the URL: section[.var] URL
			    --replace-all         replace all matching variables: name value [value_regex]
			    --add                 add a new variable: name value
			    --unset               remove a variable: name [value-regex]
			    --unset-all           remove all matches: name [value-regex]
			    --rename-section      rename section: old-name new-name
			    --remove-section      remove a section: name
			    -l, --list            list all
			    -e, --edit            open an editor
			    --get-color           find the color configured: slot [default]
			    --get-colorbool       find the color setting: slot [stdout-is-tty]

			Type
			    --bool                value is "true" or "false"
			    --int                 value is decimal number
			    --bool-or-int         value is --bool or --int
			    --path                value is a path (file or directory name)

			Other
			    -z, --null            terminate values with NUL byte
			    --name-only           show variable names only
			    --includes            respect include directives on lookup
  	repository
  		git config
  			elmanko@Ruth:~/Projects/GitBasics$ git config
			usage: git config [<options>]

			Config file location
			    --global              use global config file
			    --system              use system config file
			    --local               use repository config file
			    -f, --file <file>     use given config file
			    --blob <blob-id>      read config from given blob object

			Action
			    --get                 get value: name [value-regex]
			    --get-all             get all values: key [value-regex]
			    --get-regexp          get values for regexp: name-regex [value-regex]
			    --get-urlmatch        get value specific for the URL: section[.var] URL
			    --replace-all         replace all matching variables: name value [value_regex]
			    --add                 add a new variable: name value
			    --unset               remove a variable: name [value-regex]
			    --unset-all           remove all matches: name [value-regex]
			    --rename-section      rename section: old-name new-name
			    --remove-section      remove a section: name
			    -l, --list            list all
			    -e, --edit            open an editor
			    --get-color           find the color configured: slot [default]
			    --get-colorbool       find the color setting: slot [stdout-is-tty]

			Type
			    --bool                value is "true" or "false"
			    --int                 value is decimal number
			    --bool-or-int         value is --bool or --int
			    --path                value is a path (file or directory name)

			Other
			    -z, --null            terminate values with NUL byte
			    --name-only           show variable names only
			    --includes            respect include directives on lookup




checar la configuracion actual
	elmanko@Ruth:~/Projects/GitBasics$ cat ~/.gitconfig 
	[user]
		name = elmanko
		email = XXXXXXXXXX@xxxxx.xx

el mismo resultado se obtiene al correr
	elmanko@Ruth:~/Projects/GitBasics$ git config --global --list
	user.name=elmanko
	user.email= 



vamos a agragarle por ejemplo que use por defecto vi como mi editor y que utilice el autocorrector para cuando se te va una letra

	elmanko@Ruth:~/Projects/GitBasics$ git config --global core.editor vi
	elmanko@Ruth:~/Projects/GitBasics$ git config --global help.autocorrect 1

podemos volver a listar usando git las configuraciones globales
	elmanko@Ruth:~/Projects/GitBasics$ git config --global --list
	user.name=elmanko
	user.email=XXXXXXXXXX@xxxxx.xx
	core.editor=vi
	help.autocorrect=1

o podemos abrir el archivo con cat 
	elmanko@Ruth:~/Projects/GitBasics$ cat ~/.gitconfig 
	[user]
		name = elmanko
		email = XXXXXXXXXX@xxxxx.xx
	[core]
		editor = vi
	[help]
		autocorrect = 1
 
 el autocorrect esta suave por que utiliza logica difusa por si estas bien meco y no escribes bien, checa este ejemplo:
 	elmanko@Ruth:~/Projects/GitBasics$ git statsr
	git: 'statsr' is not a git command. See 'git --help'.

	Did you mean this?
		status

ya con su autocorrector activado, ve nomas el cambio:
	elmanko@Ruth:~/Projects/GitBasics$ git statsr
	WARNING: You called a Git command named 'statsr', which does not exist.
	Continuing under the assumption that you meant 'status'
	in 0.1 seconds automatically...
	fatal: Not a git repository (or any of the parent directories): .git

ojo no tengo ningun repo jalando aun en ese directorio entonces es el output que esperamos:
	elmanko@Ruth:~/Projects/GitBasics$ git status
	fatal: Not a git repository (or any of the parent directories): .git
puedes configurar otras opciones como el color, o prevenir broncas con caracteres marcianos si otra raza esta usando Windows al editar los archivos (CRLF) git puede hacer esa conversion automaticamente.

	elmanko@Ruth:~/Projects/GitBasics$ git config --global color.ui auto
	elmanko@Ruth:~/Projects/GitBasics$ git config --global core.autocrlf true

	elmanko@Ruth:~/Projects/GitBasics$ git config --global --list
	user.name=elmanko
	user.email=XXXXXXXXXX@xxxxx.xx
	core.editor=vi
	core.autocrlf=true
	help.autocorrect=1
	color.ui=auto

y en su archivito
	elmanko@Ruth:~/Projects/GitBasics$ cat ~/.gitconfig 
	[user]
		name = elmanko
		email = XXXXXXXXXX@xxxxx.xx
	[core]
		editor = vi
		autocrlf = input
	[help]
		autocorrect = 1
	[color]
		ui = auto

Crear un repo local
	Voy a crear una repo local en el directorio en el que me encuentro:
		elmanko@Ruth:~/Projects/GitBasics$ ls -lrta .
		total 20
		drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 11:46 ..
		drwxrwxr-x 2 elmanko elmanko 4096 Apr 28 12:13 .
		-rw-rw-r-- 1 elmanko elmanko 8276 Apr 28 12:32 git.txt
	
	nomas tengo un archivo git.txt con literal ese archivo, para echar a jalar git se usa el git init:

		elmanko@Ruth:~/Projects/GitBasics$ git init
		Initialized empty Git repository in /home/elmanko/Projects/GitBasics/.git/
	
	Ahora ya puede verse un directorio .git con el repo y su metadata:
		elmanko@Ruth:~/Projects/GitBasics$ ls -lrta .
		total 24
		drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 11:46 ..
		-rw-rw-r-- 1 elmanko elmanko 8276 Apr 28 12:32 git.txt
		drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 12:41 .
		drwxrwxr-x 7 elmanko elmanko 4096 Apr 28 12:41 .git

agregar archivos
	Si checo el status nos va a decir que hay ahi un archivo nuevo

		elmanko@Ruth:~/Projects/GitBasics$ git status
		On branch master

		Initial commit

		Untracked files:
		  (use "git add <file>..." to include in what will be committed)

			git.txt

		nothing added to commit but untracked files present (use "git add" to track)

	Usamos el comando add para agregar(duh) el archivo y checamos el status

		elmanko@Ruth:~/Projects/GitBasics$ git add git.txt 
		elmanko@Ruth:~/Projects/GitBasics$ git status
		On branch master

		Initial commit

		Changes to be committed:
		  (use "git rm --cached <file>..." to unstage)

			new file:   git.txt

	Ya agregado podemos darle su "commit" lo cual lo "guarda" en esa version en especifico, el comando va a abrir el editor que configuramos de inicio para darle un mesaje descriptivo del cambio que hicimos en el repositorio

		elmanko@Ruth:~/Projects/GitBasics$ git commit
		[master (root-commit) 26d7621] Agregue el git.txt
		 1 file changed, 243 insertions(+)
		 create mode 100644 git.txt
	Notese que mi comentario pu;etas fue : "Agregue el git.txt", y este "cambio" ya se puede ver reflejado en el log del repo:
		elmanko@Ruth:~/Projects/GitBasics$ git log
		commit 26d76211774ae58d6beda162d89299c82709dabc
		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
		Date:   Tue Apr 28 12:48:23 2020 +0530

		    Agregue el git.txt
	git idetifica los cambios con un sha en este caso: 26d76211774ae58d6beda162d89299c82709dabc
	los cuales se pueden abreviar usando solo una parte, pero ahorita vemos.

	como estoy literal usando el mismo file para escribir este post, ya no es el mismo que guardamos por lo tanto fue modificado:

		elmanko@Ruth:~/Projects/GitBasics$ git status
		On branch master
		Changes not staged for commit:
		  (use "git add <file>..." to update what will be committed)
		  (use "git checkout -- <file>..." to discard changes in working directory)

			modified:   git.txt

		no changes added to commit (use "git add" and/or "git commit -a")

	Necesitamos agregar el archivo de nuevo, lo podemos hacer con el comando add y verificar con status

			elmanko@Ruth:~/Projects/GitBasics$ git add -u

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes to be committed:
			  (use "git reset HEAD <file>..." to unstage)

				modified:   git.txt

	ya agregado toca darle su commit, checa como ahora usando -m le paso el mensaje en el mismo comando
			elmanko@Ruth:~/Projects/GitBasics$ git commit -m 'nuevos ejemplos de commits y add'
			[master aa258c3] nuevos ejemplos de commits y add
			 1 file changed, 80 insertions(+), 13 deletions(-)

	y verificamos el log:
			
			elmanko@Ruth:~/Projects/GitBasics$ git log
			commit aa258c30f0f7fd9c499917973afe33e0fb09b549
			Author: elmanko <XXXXXXXXXX@xxxxx.xx>
			Date:   Tue Apr 28 12:56:21 2020 +0530

			    nuevos ejemplos de commits y add

			commit 26d76211774ae58d6beda162d89299c82709dabc
			Author: elmanko <XXXXXXXXXX@xxxxx.xx>
			Date:   Tue Apr 28 12:48:23 2020 +0530

			    Agregue el git.txt

    ahi ya se puede ver el historial de cambios con sus shas y todo el pedo, tipo pila, la entrada de arriba es la ultima y va cronologicamente para abajo.

    como dije antes no se necesita el chorizote de sha completo(aunque quisieran), podemos abreviar, en seguida esta un ejemplo de como checar las diferencias entre las dos versiones del archivo, lo tuve que cortar un tramo:
    	elmanko@Ruth:~/Projects/GitBasics$ git diff 26d7621..aa258c30
		diff --git a/git.txt b/git.txt
		index 28e96be..881a592 100644
		--- a/git.txt
		+++ b/git.txt
		@@ -213,26 +213,93 @@ y en su archivito
		 
		 Crear un repo local
		        Voy a crear una repo local en el directorio en el que me encuentro:
		-       elmanko@Ruth:~/Projects/GitBasics$ ls -lrta .
		-       total 20
		-       drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 11:46 ..
		-       drwxrwxr-x 2 elmanko elmanko 4096 Apr 28 12:13 .
		-       -rw-rw-r-- 1 elmanko elmanko 8276 Apr 28 12:32 git.txt
		+               elmanko@Ruth:~/Projects/GitBasics$ ls -lrta .
		+               total 20
		+               drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 11:46 ..
		+               drwxrwxr-x 2 elmanko elmanko 4096 Apr 28 12:13 .
		+               -rw-rw-r-- 1 elmanko elmanko 8276 Apr 28 12:32 git.txt
		        
		        nomas tengo un archivo git.txt con literal ese archivo, para echar a jalar git se usa el git init:
		 
		-       elmanko@Ruth:~/Projects/GitBasics$ git init
		-       Initialized empty Git repository in /home/elmanko/Projects/GitBasics/.git/
		+               elmanko@Ruth:~/Projects/GitBasics$ git init
		+               Initialized empty Git repository in /home/elmanko/Projects/GitBasics/.git/
		        
		        Ahora ya puede verse un directorio .git con el repo y su metadata:
		-       elmanko@Ruth:~/Projects/GitBasics$ ls -lrta .
		-       total 24
		-       drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 11:46 ..
		-       -rw-rw-r-- 1 elmanko elmanko 8276 Apr 28 12:32 git.txt
		-       drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 12:41 .
		-       drwxrwxr-x 7 elmanko elmanko 4096 Apr 28 12:41 .git
		+               elmanko@Ruth:~/Projects/GitBasics$ ls -lrta .
		+               total 24
		+               drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 11:46 ..
		+               -rw-rw-r-- 1 elmanko elmanko 8276 Apr 28 12:32 git.txt
		+               drwxrwxr-x 3 elmanko elmanko 4096 Apr 28 12:41 .
		+               drwxrwxr-x 7 elmanko elmanko 4096 Apr 28 12:41 .git
		 
		 agregar archivos
		+       Si checo el status nos va a decir que hay ahi un archivo nuevo
		+
		+               elmanko@Ruth:~/Projects/GitBasics$ git status
		+               On branch master
		+
		+               Initial commit
		+
		+               Untracked files:
		+                 (use "git add <file>..." to include in what will be committed)
		+
		+                       git.txt
		+
		+               nothing added to commit but untracked files present (use "git add" to track)
		+
		+       Usamos el comando add para agregar(duh) el archivo y checamos el status
		+
		+               elmanko@Ruth:~/Projects/GitBasics$ git add git.txt 
		+               elmanko@Ruth:~/Projects/GitBasics$ git status
		+               On branch master
		+
	git entiende el ultimo cambio com HEAD, entonces podemos obtener el mismo resultado con los siguientes comandos:

			git diff HEAD~1..HEAD
		  	
  	en el caso anterior HEAD~1 seria como agarrar el cambio anterior al ultimo, en el siguiente caso si no se especifica HEAD al final, git simplemente asume que es HEAD
		  	
		  	git diff HEAD~1..

	Vamos a agregar otros archivos pa agarrar cura:

			elmanko@Ruth:~/Projects/GitBasics$ touch archivo1.txt archivo2.txt
	
	Y checamos el status
	
			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes not staged for commit:
			  (use "git add <file>..." to update what will be committed)
			  (use "git checkout -- <file>..." to discard changes in working directory)

				modified:   git.txt

			Untracked files:
			  (use "git add <file>..." to include in what will be committed)

				archivo1.txt
				archivo2.txt

			no changes added to commit (use "git add" and/or "git commit -a")

	Si intentamos de nuevo el add -u que jalo antes vamos a tener el siguiente resultado:

			elmanko@Ruth:~/Projects/GitBasics$ git add -u

	Checa el dato de que nomas acepto los cambios en git.txt, pero no en los archivos nuevos, precisamente por que solo jala en archivos existentes no para agregar nuevos:

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes to be committed:
			  (use "git reset HEAD <file>..." to unstage)

				modified:   git.txt

			Untracked files:
			  (use "git add <file>..." to include in what will be committed)

				archivo1.txt
				archivo2.txt
	Podemos agregar los nuevos archivos con add -A

			elmanko@Ruth:~/Projects/GitBasics$ git add -A

	Nomas que al tiro por que va a agregar todo, archivos nuevos y modificados tambien, ahora asi luce el status:

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes to be committed:
			  (use "git reset HEAD <file>..." to unstage)

				new file:   archivo1.txt
				new file:   archivo2.txt
				modified:   git.txt

	Y ahora si se puede hacer el commit de los archivos nuevos junto con el existente:

			elmanko@Ruth:~/Projects/GitBasics$ git commit -m "meti un par de archivos nuevos para ejemplificar: archivo1.txt archivo2.txt"
			[master 2728406] meti un par de archivos nuevos para ejemplificar: archivo1.txt archivo2.txt
			 3 files changed, 146 insertions(+)
			 create mode 100644 archivo1.txt
			 create mode 100644 archivo2.txt

	 Podemos ver el log con todos los commits hechos hasta ahora y podriamos checar las diferencias de nuevo

	 		elmanko@Ruth:~/Projects/GitBasics$ git log
	 		commit 2728406cf3964900bea96f369aaf1d56291c78a8
	 		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
	 		Date:   Tue Apr 28 13:13:26 2020 +0530

	 		    meti un par de archivos nuevos para ejemplificar: archivo1.txt archivo2.txt

	 		commit aa258c30f0f7fd9c499917973afe33e0fb09b549
	 		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
	 		Date:   Tue Apr 28 12:56:21 2020 +0530

	 		    nuevos ejemplos de commits y add

	 		commit 26d76211774ae58d6beda162d89299c82709dabc
	 		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
	 		Date:   Tue Apr 28 12:48:23 2020 +0530

	 		    Agregue el git.txt

    git tiene un area de "staging" donde los cambios no han sido "commiteados" aun y podemos tratar cada uno de manera individual en lugar de agregar todos juntos con el mismo mensaje, checa:

    YA modifique archivo1.txt y git.txt, entonces git status nos marca que estan modificados:

    		elmanko@Ruth:~/Projects/GitBasics$ git status
    		On branch master
    		Changes not staged for commit:
    		  (use "git add <file>..." to update what will be committed)
    		  (use "git checkout -- <file>..." to discard changes in working directory)

    			modified:   archivo1.txt
    			modified:   git.txt

    		no changes added to commit (use "git add" and/or "git commit -a")

	Ahora vamos a individualemte commitear cada cambio:

			elmanko@Ruth:~/Projects/GitBasics$ git add archivo1.txt 
			elmanko@Ruth:~/Projects/GitBasics$ git commit -m 'le puse un Hola mundo a archivo1.txt'
			[master 33f2dfd] le puse un Hola mundo a archivo1.txt
			 1 file changed, 1 insertion(+)

	 Este es el ejemplo perfecto de 1) estar bien meco para escribir, y 2) el autocorrect jalando como debe:

			elmanko@Ruth:~/Projects/GitBasics$ git dd git.txt
			WARNING: You called a Git command named 'dd', which does not exist.
			Continuing under the assumption that you meant 'add'
			in 0.1 seconds automatically...
			elmanko@Ruth:~/Projects/GitBasics$ git commit -m 'ejemplo de git add'
			[master 5fcf802] ejemplo de git add
			 1 file changed, 44 insertions(+)

	 Y volvemos a confirmarlo checando el log:

	 		elmanko@Ruth:~/Projects/GitBasics$ git log
	 		commit 5fcf802be7ab2d57626d4f050bcd88c4b7e37e37
	 		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
	 		Date:   Tue Apr 28 13:24:00 2020 +0530

	 		    ejemplo de git add

	 		commit 33f2dfda1acec15a551d6bc2a348e0f2706b7a35
	 		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
	 		Date:   Tue Apr 28 13:23:10 2020 +0530

	 		    le puse un Hola mundo a archivo1.txt

	 		commit 2728406cf3964900bea96f369aaf1d56291c78a8
	 		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
	 		Date:   Tue Apr 28 13:13:26 2020 +0530

	 		    meti un par de archivos nuevos para ejemplificar: archivo1.txt archivo2.txt

	 		commit aa258c30f0f7fd9c499917973afe33e0fb09b549
	 		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
	 		Date:   Tue Apr 28 12:56:21 2020 +0530

	 		    nuevos ejemplos de commits y add

	 		commit 26d76211774ae58d6beda162d89299c82709dabc
	 		Author: elmanko <XXXXXXXXXX@xxxxx.xx>
	 		Date:   Tue Apr 28 12:48:23 2020 +0530

	 		    Agregue el git.txt

 	El comportamiento es similar cuando borramos o cambiamos el nombre de un archivo:

 			elmanko@Ruth:~/Projects/GitBasics$ rm archivo2.txt 
 			
	Git reconoce que un archivo fue borrado y otro esta modificado:

 			elmanko@Ruth:~/Projects/GitBasics$ git status
 			On branch master
 			Changes not staged for commit:
 			  (use "git add/rm <file>..." to update what will be committed)
 			  (use "git checkout -- <file>..." to discard changes in working directory)

 				deleted:    archivo2.txt
 				modified:   git.txt

 			no changes added to commit (use "git add" and/or "git commit -a")
 	
	PAse ambos a "stage" con add -u

 			elmanko@Ruth:~/Projects/GitBasics$ git add -u
 	
 	ahora ya esta listo para el comit sabiendo que un archivo se modifico y el otro fue borrado

 			elmanko@Ruth:~/Projects/GitBasics$ git status
 			On branch master
 			Changes to be committed:
 			  (use "git reset HEAD <file>..." to unstage)

 				deleted:    archivo2.txt
 				modified:   git.txt

	Por otro lado cuando le cambiamos el nombre a un archivo que esta siendo monitoreado por git, el guey cree que lo borraste y agregaste otro nuevo:

			elmanko@Ruth:~/Projects/GitBasics$ mv archivo_nuevo.txt archivo2.txt
	

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes not staged for commit:
			  (use "git add/rm <file>..." to update what will be committed)
			  (use "git checkout -- <file>..." to discard changes in working directory)

				deleted:    archivo_nuevo.txt

			Untracked files:
			  (use "git add <file>..." to include in what will be committed)

				archivo2.txt

			no changes added to commit (use "git add" and/or "git commit -a")

	ya despues de eso se puede hacer el stage correctamente y al checar que el contenido es el mismo solo el nombre cambio git ya lo identifica como un rename:

			elmanko@Ruth:~/Projects/GitBasics$ git add -A

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes to be committed:
			  (use "git reset HEAD <file>..." to unstage)

				renamed:    archivo_nuevo.txt -> archivo2.txt

	Y ya puedes hacer tu commit sin pedos:

			elmanko@Ruth:~/Projects/GitBasics$ git commit -m 'no me habia salido el rename por que no estaba en stage los cambios originalmente, ya jalo'
			[master a87f24a] no me habia salido el rename por que no estaba en stage los cambios originalmente, ya jalo
			 1 file changed, 0 insertions(+), 0 deletions(-)
			 rename archivo_nuevo.txt => archivo2.txt (100%)

	 si haces una pendejada y necesitas volver a una version anterior del archivo usamos el comando checkout:

	 		elmanko@Ruth:~/Projects/GitBasics$ ls -lrt
	 		total 32
	 		-rw-rw-r-- 1 elmanko elmanko    12 Apr 28 13:19 archivo1.txt
	 		-rw-rw-r-- 1 elmanko elmanko    24 Apr 28 13:43 archivo2.txt
	 		-rw-rw-r-- 1 elmanko elmanko 23516 Apr 28 13:51 git.txt
	 		
	Si modificamos archivo2.txt, (en este caso le borre el contenido), git se va a dar cuenta de la modificacion en el status:

	 		elmanko@Ruth:~/Projects/GitBasics$ vi archivo2.txt 
	 		
	 		elmanko@Ruth:~/Projects/GitBasics$ git status
	 		On branch master
	 		Changes not staged for commit:
	 		  (use "git add <file>..." to update what will be committed)
	 		  (use "git checkout -- <file>..." to discard changes in working directory)

	 			modified:   archivo2.txt
	 			modified:   git.txt

	 		no changes added to commit (use "git add" and/or "git commit -a")
	
	ahora usamos git checkout para regresar el archivo a su version anterior:

	 		elmanko@Ruth:~/Projects/GitBasics$ git checkout archivo2.txt
	
	git ahora lo ve normal, notese que estoy constantemente modificando git.txt por que ahi es donde estoy escribiendo esto, LOL.

	 		elmanko@Ruth:~/Projects/GitBasics$ git status 
	 		On branch master
	 		Changes not staged for commit:
	 		  (use "git add <file>..." to update what will be committed)
	 		  (use "git checkout -- <file>..." to discard changes in working directory)

	 			modified:   git.txt

	 		no changes added to commit (use "git add" and/or "git commit -a")
	
	su cat para ver el archivo, y boom esta en la version anterior, antes de que le borrara el contenido

	 		elmanko@Ruth:~/Projects/GitBasics$ cat archivo2.txt 
	 		otro archivo
	 		mas lineas
	
	y listo.

	 		elmanko@Ruth:~/Projects/GitBasics$ git status
	 		On branch master
	 		Changes not staged for commit:
	 		  (use "git add <file>..." to update what will be committed)
	 		  (use "git checkout -- <file>..." to discard changes in working directory)

	 			modified:   git.txt

	 		no changes added to commit (use "git add" and/or "git commit -a")


	 Ahora, supongamos que se me fueron las cabras en multiples archivos y ya hice lo que coloquialmente diriamos: un cagadero.

	Le agregamos unas lineas al archivo1.txt:

			elmanko@Ruth:~/Projects/GitBasics$ vi archivo1.txt 

	Luego checamos el status

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes not staged for commit:
			  (use "git add <file>..." to update what will be committed)
			  (use "git checkout -- <file>..." to discard changes in working directory)

				modified:   archivo1.txt
				modified:   git.txt

			no changes added to commit (use "git add" and/or "git commit -a")
	Ahi me di cuenta que git.txt tenia cambios y no queria borrarlos para el siguiente ejemplo asi que me avente un commit en corto:

			elmanko@Ruth:~/Projects/GitBasics$ git commit git.txt -m 'pa que no se borre lo importante'
			[master ba63134] pa que no se borre lo importante
			 1 file changed, 128 insertions(+), 1 deletion(-)
		
			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes not staged for commit:
			  (use "git add <file>..." to update what will be committed)
			  (use "git checkout -- <file>..." to discard changes in working directory)

				modified:   archivo1.txt

			no changes added to commit (use "git add" and/or "git commit -a")
	Ahora si, de pura loquera vamos a borrar el archivo2.txt:

			elmanko@Ruth:~/Projects/GitBasics$ rm archivo2.txt 
		
	Checamos el status y ahi sale que hay un archivo con cambios y otro borrado:

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Changes not staged for commit:
			  (use "git add/rm <file>..." to update what will be committed)
			  (use "git checkout -- <file>..." to discard changes in working directory)

				modified:   archivo1.txt
				deleted:    archivo2.txt

			no changes added to commit (use "git add" and/or "git commit -a")
	
	Y ahi nos damos cuenta que la cajeteamos y queremos echarle un ctrl+z pa; deshacer la ultima accion(en cuanto a commits en el repo), en ese caso el siguiente comando es tu amigo:

			elmanko@Ruth:~/Projects/GitBasics$ git reset --hard
			HEAD is now at ba63134 pa que no se borre lo importante
	
	Checamos el status y los archivos y ya esta todo al centavo antes de que hicieras tus mequeces

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			nothing to commit, working directory clean

			elmanko@Ruth:~/Projects/GitBasics$ ls -lrt
			total 36
			-rw-rw-r-- 1 elmanko elmanko 25620 Apr 28 16:35 git.txt
			-rw-rw-r-- 1 elmanko elmanko    24 Apr 30 11:50 archivo2.txt
			-rw-rw-r-- 1 elmanko elmanko    12 Apr 30 11:50 archivo1.txt


	Si por alguna razon en el directorio se crearon archivos como tipo temporales que no se necesitan en el repositorio se pueden "limpiar" con el comando clean:

			elmanko@Ruth:~/Projects/GitBasics$ touch ejemplo1.txt ejemplo2.txt
	
			elmanko@Ruth:~/Projects/GitBasics$ ll
			total 32
			-rw-rw-r-- 1 elmanko elmanko 28259 Apr 30 12:01 git.txt
			-rw-rw-r-- 1 elmanko elmanko    42 Apr 30 12:05 archivo2.txt
			-rw-rw-r-- 1 elmanko elmanko     0 Apr 30 12:16 ejemplo2.txt
			-rw-rw-r-- 1 elmanko elmanko     0 Apr 30 12:16 ejemplo1.txt
	
			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			Untracked files:
			  (use "git add <file>..." to include in what will be committed)

				ejemplo1.txt
				ejemplo2.txt

			nothing added to commit but untracked files present (use "git add" to track)
	
			elmanko@Ruth:~/Projects/GitBasics$ git clean
			fatal: clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean
	
	Git clean se niega a borrar a la brava asi nomas, te puede ayudar con un modo interactivo (-i), un modo que te enumera los archivos que potencialemtne borraria (-n), y el de force que lo pone en "true" para que los borre(-f):

			elmanko@Ruth:~/Projects/GitBasics$ git clean -n
			Would remove ejemplo1.txt
			Would remove ejemplo2.txt
	
			elmanko@Ruth:~/Projects/GitBasics$ git clean -f
			Removing ejemplo1.txt
			Removing ejemplo2.txt
	
	Despues de eso el status esta al cien de nuevo:

			elmanko@Ruth:~/Projects/GitBasics$ git status
			On branch master
			nothing to commit, working directory clean
	
	Y los archivos temporales de ejemplo ya no existen:

			elmanko@Ruth:~/Projects/GitBasics$ ll
			total 32
			-rw-rw-r-- 1 elmanko elmanko 28259 Apr 30 12:01 git.txt
			-rw-rw-r-- 1 elmanko elmanko    42 Apr 30 12:05 archivo2.txt

	OTras ocasiones para no estar haciendo clean todo el tiempo simplemente podemos decirle a git que ignore ciertos archivos (como a tu ex) o ciertas extensiones de archivos en el directorio del repo, git tiene un archivo oculto llamado .gitignore, el cual podemos crear y actualizar con un archivo en especifico o una extension de archivo como *.txt o un directorio, etcetera:
	
checar cambios

ver historial

ver diferencias


